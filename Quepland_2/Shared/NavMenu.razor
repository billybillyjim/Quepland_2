@inject NavigationManager UriHelper
@inject GameState GameState

<div class="top-row pl-4 navbar navbar-light">
    <div style="color:white;font-size:larger">Quepland 2 (@GameState.Version)</div>
    <button style="        background-color: white;
        border: solid black 1px;
        border-radius: 0.25rem;
        right: -13px;
        position: relative;
        top: -9px;" @onclick="@(() => ToggleSettings())">
        <img style="width:30px;height:30px;" src="data/Images/Settings.png" />
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu" style="width:300px!important">
    @if (GameState.IsOnHuntingTrip == false && GameState.CurrentAFKAction == null)
    {

        <ul class="nav flex-column">
            <li class="nav-item px-3">
                <div style="@GetStyle("Bank")" onclick="@(new Action(() => GoToArea("Bank")))">
                    <img style="height: 45px; width: 45px; padding: 5px; margin-right: 10px; border-radius: 0.25rem; background-color: white;" src="@("data/Images/Bank.png")" />Bank
                </div>

            </li>
            @if (HasAnyAreaUnlocked() == false && HasAnyRegionUnlocked() == false)
            {
                <li class="nav-item px-3">
                    <div style="background-color:rgba(255, 255, 255, 0.2);cursor:pointer;" onclick="@(new Action(() => GoToArea("QueplandFields")))">
                        <img style="height: 45px; width: 45px; padding: 5px; margin-right: 10px; border-radius: 0.25rem; background-color: white;" src="@("data/Images/House.png")" />Find a way home
                    </div>

                </li>
            }
            @foreach (Region region in AreaManager.Instance.GetLandByName(GameState.CurrentLand.Name).Regions)
            {
                if (region.IsUnlocked)
                {

                    <li class="nav-item px-3" style="background-color:rgba(255, 255, 255, 0.2);cursor:pointer;" @onclick="@(() => ChangeOpenRegion(region))">
                        <span style="color:black;font-size:large;display:inline-block;padding-top:10px;">@region.Name  </span><img style="height:25px;width:25px;float:right;margin-top:11px;" src="data/Images/Hamburger.png" />
                    </li>

                    @if (region == openRegionMenu)
                    {
                        foreach (Area a in region.Areas)
                        {
                            if (a.IsUnlocked && a.IsHidden == false && a.HasRequirements())
                            {
                                <li class="nav-item px-3" style="position:relative;padding-bottom:0px;"
                                    oncontextmenu="return false;" draggable="false"
                                    onmouseup="@(new Action<MouseEventArgs>((args) => ShowMenu(args, a)))">

                                    <div style="@GetStyle(a.AreaURL)" @onclick="@(() => GoToArea(a.AreaURL))">
                                        <img style="height:45px;width:45px;padding:5px;margin-right:10px;border-radius:0.25rem;background-color:white;"
                                             src="@("data/Images/" + a.Image + ".png")"
                                             onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, a.Name, GetAreaInfo(a))))"
                                             onmouseout="@(new Action(() => GameState.HideTooltip()))" />
                                        @a.Name
                                        @if (a.HasUnlockableAreas())
                                        {
                                            <div style="margin:5px;background-color:sandybrown;border-radius:0.5rem;height:12px;width:12px;position:absolute;top:15px;right:10px;"></div>
                                        }
                                        @if (a.TrapSlotIsReady())
                                        {
                                            <div style="margin:5px;background-color:white;border-radius:0.5rem;height:12px;width:12px;position:absolute;top:0px;right:10px;"><img src="data/Images/Carcass.png" style="height:12px;width:12px;margin-top:-14px;" /></div>
                                        }
                                    </div>
                                </li>
                            }
                            else if (a.IsUnlocked && a.IsHidden == false)
                            {
                                <li class="nav-item px-3" style="position:relative;padding-bottom:0px;"
                                    oncontextmenu="return false;" draggable="false"
                                    onmouseup="@(new Action<MouseEventArgs>((args) => ShowMenu(args, a)))">

                                    <div style="@GetStyle(a.AreaURL);background-color:#FF000055"
                                         onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, a.Name, a.GetRequirementTooltip())))"
                                         onmouseout="@(new Action(() => GameState.HideTooltip()))">
                                        <img style="height:45px;width:45px;padding:5px;margin-right:10px;border-radius:0.25rem;background-color:white;"
                                             src="@("data/Images/" + a.Image + ".png")" />
                                        @a.Name
                                    </div>
                                </li>

                            }
                        }
                    }
                }

            }
        </ul>
    }
    else
    {
        if (GameState.IsOnHuntingTrip)
        {
            <button class="btn btn-primary" @onclick="@(() => CancelHunt())">Cancel Hunt</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="@(() => CancelAFKing())">Cancel Action</button>
        }
    }
    <ul style="margin-bottom:50px;">
    </ul>
    <ul style="position:absolute;padding:0;bottom:10px;left:10px;">
        <li>
            @if (GameState.SaveGame)
            {<div>
                    Saving...
                </div>
            }
            else if (SaveManager.LastSave != DateTime.MinValue)
            {
                <div onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, SaveManager.LastSave.ToLocalTime().ToLongTimeString() + "\n" + SaveManager.LastSave.ToLocalTime().ToLongDateString(), false, true)))"
                     onmouseout="@(new Action(() => GameState.HideTooltip()))">

                    Last Save:@SaveManager.LastSave.ToLocalTime().ToShortTimeString()
                </div>
            }
            else
            {
                <div onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, "You've never saved on this playthough. The game will autosave every 30 minutes, or you can manually save in the settings menu above.", false, true)))"
                     onmouseout="@(new Action(() => GameState.HideTooltip()))">
                    Last Save:Never
                </div>
            }
        </li>
    </ul>
</div>

@code {

    private bool collapseNavMenu = true;
    private Region openRegionMenu;

    public void CancelAFKing()
    {
        double hours = Math.Round(Math.Min(DateTime.UtcNow.Subtract(GameState.CurrentAFKAction.StartTime).TotalHours, 8));
        if (hours < 0.5)
        {
            hours = 0;
        }
        Player.Instance.GainExperience(GameState.CurrentAFKAction.SkillTrained, (int)hours * GameState.CurrentAFKAction.ExpPerHour);
        MessageManager.AddMessage("You cut your training short, but still feel somewhat more knowledgable about " + GameState.CurrentAFKAction.SkillTrained + " after spending time here.");
        GameState.CurrentAFKAction.IsActive = false;
        GameState.CurrentAFKAction = null;
        GameState.UpdateState();
    }
    public void CancelHunt()
    {
        GameState.CancelHuntingTrip();

        GameState.UpdateState();
    }

    public void ChangeOpenRegion(Region newRegion)
    {
        if (openRegionMenu == newRegion)
        {
            openRegionMenu = null;
        }
        else
        {
            openRegionMenu = newRegion;
        }

        GameState.UpdateState();
    }
    public void ChangeOpenRegion(Region newRegion, bool toggleClosed)
    {
        if (openRegionMenu == newRegion && toggleClosed)
        {
            openRegionMenu = null;
        }
        else
        {
            openRegionMenu = newRegion;
        }

        GameState.UpdateState();
    }
    public bool HasAnyAreaUnlocked()
    {
        foreach (Region region in AreaManager.Instance.GetLandByName(GameState.CurrentLand.Name).Regions)
        {
            foreach (Area area in region.Areas)
            {
                if (area.IsUnlocked)
                {
                    return true;
                }
            }
        }
        return false;
    }
    public bool HasAnyRegionUnlocked()
    {
        foreach (Region region in AreaManager.Instance.GetLandByName(GameState.CurrentLand.Name).Regions)
        {
            if (region.IsUnlocked)
            {
                return true;
            }
        }
        return false;
    }

    public void GoToArea(string name)
    {
        if (name == "Nowhere")
        {
            return;
        }
        if (GameState.Location != name)
        {
            GameState.StopActions();
            GameState.Location = name;
            if (name != "Bank")
            {
                try
                {
                    GameState.CurrentLand = AreaManager.Instance.GetLandForArea(AreaManager.Instance.GetAreaByURL(name));

                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                    Console.WriteLine(e.StackTrace);
                }
            }
            UriHelper.NavigateTo("World/" + name + "/");
            GameState.UpdateState();
        }

    }
    public void ToggleSettings()
    {
        GameState.ShowSettings = !GameState.ShowSettings;
        if (GameState.ShowSettings)
        {
            GameState.ShowExpTrackerSettings = false;
        }
        GameState.UpdateState();
    }

    private string GetAreaInfo(Area area)
    {
        string info = "";
        foreach (string NPC in area.NPCs)
        {
            if (NPCManager.Instance.GetNPCByName(NPC).AvailableDialogCount() > 0)
            {
                info += NPC + "\n";
            }

        }
        if (area.NPCs.Count > 0)
        {
            info += "\n";
        }

        foreach (Building building in area.Buildings)
        {
            info += building.Name + "\n";
        }
        if (area.Buildings.Count > 0)
        {
            info += "\n";
        }

        foreach (string action in area.Actions)
        {
            if (action.Contains(':'))
            {
                info += action.Split(':')[1] + "\n";
            }
            else
            {
                info += action + "\n";
            }

        }
        return info;
    }
    private void ShowMenu(MouseEventArgs args, Area area)
    {
        if (args.Button == 2)
        {
            GameState.CurrentContextMenu = new ContextMenu();
            if (area.IsUnlocked && area.IsHidden == false && area.HasRequirements() == false)
            {
                foreach (Requirement r in area.Requirements)
                {
                    if (r.Action != "None")
                    {
                        GameItem i = Bank.Instance.Inventory.FindItemCapableOfAction(r.Action);
                        if (i != null)
                        {
                            GameState.CurrentContextMenu.Buttons.Add(new ContextButton("Withdraw " + i.Name + " from bank", new Action(() => Bank.Instance.Withdraw(i, 1))));
                        }
                    }
                }
            }
            if (area.HasRequirements())
            {
                GameState.CurrentContextMenu.Buttons.Add(new ContextButton("Go to " + area.Name, new Action(() => GoToArea(area.AreaURL))));
            }


            GameState.ShowContextMenu(args);
        }
    }
    private string GetStyle(string loc)
    {
        if (loc == GameState.Location)
        {
            return "color:black;cursor:pointer;font-size:large;background-color:rgba(0.1,0.1,0.1,0.3);border-radius:0.5rem;margin-right:-8px;margin-left:-5px;padding:5px;white-space:nowrap;";
        }
        return "color:black;cursor:pointer;font-size:large;padding:5px;margin-left:-5px;white-space:nowrap;";
    }
    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    protected override void OnInitialized()
    {
        GameState.NavMenu = this;
        GameState.StateChanged += OnGameStateChanged;
    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}