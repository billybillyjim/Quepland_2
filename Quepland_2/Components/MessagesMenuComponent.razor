@inject GameState GameState
@implements IDisposable

<div class="modal-footer" style="display:contents;">

        <table style="margin-top: -10px;">
            @foreach (Message message in MessageManager.GetReversedMessages().Take(NumToShow))
            {
                <tr>
                    <td>
                        <pre style="        
                            display: grid;
                            margin: 0;
                            width: 100%;
                            max-width:@(GetMinWidth());
                            font-style: normal;
                            font-variant-ligatures: normal;
                            font-variant-caps: normal;
                            font-variant-numeric: normal;
                            font-variant-east-asian: normal;
                            font-weight: 400;
                            font-stretch: normal;
                            font-size: 16px;
                            line-height: 18px;
                            font-family: Arial;
                            white-space: pre-line;
                            margin-bottom: -5px;       
                            margin-left:@(LeftMargin)px;
                            margin-top:@(TopMargin)px;
                            padding:3px;
                            color: @(message.Color); @(message.Style)">
                        @message.Text
                    </pre>
                    </td>
                </tr>
            }

       </table>
    

</div>


@functions{
    [Parameter]
    public int NumToShow { get; set; }
    [Parameter]
    public int LeftMargin { get; set; } = 0;
    [Parameter]
    public int TopMargin { get; set; } = 0;

    public string GetMinWidth()
    {
        if (isHidden)
        {
            return "" + (GameState.MinWindowWidth - 190) + "px";
        }
        return "100%";
    }

    private bool isHidden;
    protected override void OnInitialized()
    {
        GameState.StateChanged += OnGameStateChanged;
    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}