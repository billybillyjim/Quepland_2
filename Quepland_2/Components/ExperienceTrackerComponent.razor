@inject GameState GameState
@implements IDisposable

@if (ShowRate)
{
    <div style="width:250px;height:50px;line-height:16px;left:5px;top:5px;position:absolute;">
        @if (SetSkill == "Most Recent")
        {
            @if (Player.Instance.LastGainedExp != null && IsBeingTracked(Player.Instance.LastGainedExp.Name))
            {
                <div @onclick="@(() => ToggleSettings())" style="cursor:pointer;">
                    @Player.Instance.LastGainedExp.Name Exp/Hr:@String.Format("{0:n0}", GetRate(Player.Instance.LastGainedExp))
                </div>
                <div>Total Gained:@(String.Format("{0:n0}", Player.Instance.LastGainedExp.Experience - GetTracker(Player.Instance.LastGainedExp.Name).StartExperience))</div>
                <div>Time:@GetTracker(Player.Instance.LastGainedExp.Name).TimeSinceTrackerStarted.ToString()</div>
            }
        }
        else
        {
            if (IsBeingTracked(SetSkill))
            {
                <div @onclick="@(() => ToggleSettings())"  style="cursor:pointer;">@SetSkill Exp/Hr:@String.Format("{0:n0}", GetRate(Player.Instance.Skills.Find(x => x.Name == SetSkill)))</div>
                <div>Total Gained:@(String.Format("{0:n0}", Player.Instance.Skills.Find(x => x.Name == SetSkill).Experience - GetTracker(Player.Instance.Skills.Find(x => x.Name == SetSkill).Name).StartExperience))</div>
                <div>Time:@GetTracker(Player.Instance.Skills.Find(x => x.Name == SetSkill).Name).TimeSinceTrackerStarted.ToString(@"dd\:hh\:mm\:ss")</div>
            }
        }
    </div>
}
<div style="width:250px;height:50px;line-height:16px;text-align:right;position:relative;">
    @if (SetSkill == "Most Recent")
    {
        @if (Player.Instance.LastGainedExp != null)
        {
            <div @onclick="@(() => ToggleSettings())" style="cursor:pointer;">
                @Player.Instance.LastGainedExp.Name (@Player.Instance.LastGainedExp.GetSkillLevelUnboosted())
            </div>
            <div>
                @String.Format("{0:n0}", Player.Instance.LastGainedExp.Experience)
            </div>
            <div class="progress" @onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, (Math.Round(Player.Instance.LastGainedExp.Progress, 2)) + "% to level " + (Player.Instance.LastGainedExp.GetSkillLevelUnboosted() + 1), "" + Player.Instance.LastGainedExp.Experience + "/" + (long)Skill.GetExperienceRequired(Player.Instance.LastGainedExp.GetSkillLevelUnboosted()))))"
                 @onmouseout="@(new Action(() => GameState.HideTooltip()))">
                <div class="progress-bar" style="background-color:#51d051;width:@(Player.Instance.LastGainedExp.Progress)%">

                </div>
            </div>
        }
        else
        {
            <div @onclick="@(() => ToggleSettings())" style="cursor:pointer;">
                Open Experience Tracker
            </div>
        }
    }
    else
    {
        <div @onclick="@(() => ToggleSettings())" style="cursor:pointer;">
            @Player.Instance.Skills.Find(x => x.Name == SetSkill).Name
        </div>
        <div>
            @String.Format("{0:n0}", Player.Instance.Skills.Find(x => x.Name == SetSkill).Experience)
        </div>
        <div class="progress" @onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, (Player.Instance.Skills.Find(x => x.Name == SetSkill).Progress) + "% to level " + (Player.Instance.Skills.Find(x => x.Name == SetSkill).GetSkillLevelUnboosted() + 1), "" + Player.Instance.Skills.Find(x => x.Name == SetSkill).Experience + "/" + (long)Skill.GetExperienceRequired(Player.Instance.Skills.Find(x => x.Name == SetSkill).GetSkillLevelUnboosted()))))"
             @onmouseout="@(new Action(() => GameState.HideTooltip()))">
            <div class="progress-bar" style="background-color: #51d051; width: @(Player.Instance.Skills.Find(x => x.Name == SetSkill).Progress) %">

            </div>
        </div>
    }

</div>
@if (GameState.ShowExpTrackerSettings)
{
<div style="position:absolute;top:55px;right:0px;width:100%;height:300px;z-index:50;background-color:black;border:solid dimgray 1px;">
    <div style="margin:5px;">
        @if (ShowRate)
        {
            <button style="margin:5px;" class="btn btn-primary" @onclick="@(() => ShowRate = !ShowRate)">
                Turn Rate Tracker Off
            </button>
        }
        else
        { <button style="margin:5px;" class="btn btn-primary" @onclick="@(() => ShowRate = !ShowRate)">
                Turn Rate Tracker On
            </button>
        }

    </div>
    @if (ShowRate)
    {
        <div style="display:flex;margin:5px;">
            @if (IsBeingTracked(SetSkill) == false)
            {
                <button class="btn btn-primary" style="margin:5px;" @onclick="@(() => SetTracker(SetSkill))">
                    Track @SetSkill Exp Rate
                </button>
                @if (SetSkill == "Most Recent" && Player.Instance.LastGainedExp != null)
                {
                    <div style="margin:5px;line-height: 40px; font-size: large;">(@Player.Instance.LastGainedExp.Name)</div>
                }
            }
            else
            {
                <button style="margin:5px;" class="btn btn-primary" @onclick="@(() => SetTracker(SetSkill))">
                    Reset @SetSkill  Exp Rate
                </button>
                <button style="margin:5px;" class="btn btn-primary" @onclick="@(() => PauseTracker(SetSkill))">
                    Cancel Tracking
                </button>
            }
        </div>
        <div style="margin-left:10px;">
            <CustomDropdownComponent DropdownItems="@skills" @bind-Value="@SetSkill" BoxText="@SetSkill"></CustomDropdownComponent>
        </div>
    }
    <div style="position:absolute;right:5px;top:5px;">
        <img src="/data/Images/NoImage.png" style="height:30px;width:30px;cursor:pointer;"  @onclick="@(() => ToggleSettings())"/>
    </div>

</div>

}


@code {

    private bool ShowRate = false;
    private List<string> skills = new List<string>();
    private string SetSkill = "Most Recent";
    public List<ExperienceTracker> TrackedExperinceRates = new List<ExperienceTracker>();

    public void SetTracker(string skill)
    {
        if(skill == "Most Recent" && Player.Instance.LastGainedExp != null)
        {
            skill = Player.Instance.LastGainedExp.Name;
        }

        ExperienceTracker tracker = TrackedExperinceRates.FirstOrDefault(x => x.Skill.Name == skill);

        Skill s = Player.Instance.Skills.FirstOrDefault(x => x.Name == skill);
        if (s == null)
        {
            return;
        }
        if (tracker == null)
        {
            ExperienceTracker t = new ExperienceTracker();

            t.StartExperience = s.Experience;
            t.Skill = s;
            t.TimeSinceTrackerStarted = TimeSpan.Zero;
            TrackedExperinceRates.Add(t);
        }
        else
        {
            tracker.StartExperience = s.Experience;
            tracker.TimeSinceTrackerStarted = TimeSpan.Zero;
            tracker.IsPaused = false;
        }


    }
    public void PauseTracker(string skill)
    {
        if (skill == "Most Recent" && Player.Instance.LastGainedExp != null)
        {
            skill = Player.Instance.LastGainedExp.Name;
        }
        ExperienceTracker tracker = TrackedExperinceRates.FirstOrDefault(x => x.Skill.Name == skill);
        if (tracker != null)
        {
            tracker.IsPaused = true;
        }
    }
    public ExperienceTracker GetTracker(string skill)
    {
        ExperienceTracker tracker = TrackedExperinceRates.FirstOrDefault(x => x.Skill.Name == skill);
        return tracker;
    }
    public bool IsBeingTracked(string skill)
    {
        if (skill == null)
        {
            return false;
        }
        if (skill == "Most Recent" && Player.Instance.LastGainedExp != null)
        {
            skill = Player.Instance.LastGainedExp.Name;
        }
        ExperienceTracker t = TrackedExperinceRates.FirstOrDefault(x => x.Skill.Name == skill);
        return (t != null && t.IsPaused == false);
    }

    public double GetRate(Skill skill)
    {
        ExperienceTracker t = TrackedExperinceRates.FirstOrDefault(x => x.Skill == skill);
        if (t != null)
        {
            double growth = skill.Experience - t.StartExperience;
            return (Math.Round(growth / t.TimeSinceTrackerStarted.TotalHours, 2));
        }
        return 0;
    }
    public void ToggleSettings()
    {
        GameState.ShowExpTrackerSettings = !GameState.ShowExpTrackerSettings;
        if (GameState.ShowExpTrackerSettings)
        {
            GameState.ShowSettings = false;
        }
        GameState.UpdateState();
    }
    protected override void OnInitialized()
    {
        skills.Add("Most Recent");
        skills.AddRange(Player.Instance.Skills.Select(x => x.Name));
        if (GameState.EXPTrackerComponent == null)
        {
            GameState.EXPTrackerComponent = this;
        }
        GameState.StateChanged += OnGameStateChanged;
    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
