@inject GameState GameState
@implements IDisposable
@inject NavigationManager UriHelper

<div class="unselectable"
     style="        height: 130px;
        min-height:130px;
        width: 350px;
        border: solid black 1px;
        padding: 5px;
        padding-top:1px;
        margin: 5px;
        margin-top:30px;
        position:relative;
">
    @if (Item != null && !HideValue)
    {
        <div style="font-weight:bold;text-overflow:ellipsis;overflow:hidden;white-space:nowrap;" onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, Item.Name, Item.GetRequirementTooltip(true))))"
             onmouseout="@(new Action(() => GameState.HideTooltip()))">
            <img src="data/Images/@(GetLock())" style="height:20px;width:20px;cursor:pointer;margin:-7px 2px -3px -3px;border-radius:0.25rem;@GetLockStyle()"
                 @onclick="@(() => ToggleLock())" />
            @Item.Name
        </div>
        <div style="position:relative;line-height:18px;margin-top:-2px;margin-right:80px;">@Item.Description</div>
        @if ((Item.WeaponInfo != null || Item.ArmorInfo != null) && Item.EquipSlot != "None")
        {
            if (Item.IsEquipped)
            {
                <div class="item-view-button"><button class="btn btn-light" @onclick="@(() => Unequip())">Unequip</button></div>

            }
            else if (Item.ArmorInfo != null && Item.HasArmorRequirements())
            {
                <div class="item-view-button">
                    <button class="btn btn-light" @onclick="@(() => Equip())">Equip</button>
                </div>
            }
            else if (Item.WeaponInfo != null && Item.HasWeaponRequirements())
            {
                <div class="item-view-button">
                    <button class="btn btn-light" @onclick="@(() => Equip())">Equip</button>
                </div>
            }
            else if (Item.HasRequirements() && Item.HasArmorRequirements() == false && Item.HasWeaponRequirements() == false)
            {
                <div class="item-view-button">
                    <button class="btn btn-light" @onclick="@(() => Equip())">Equip</button>
                </div>

            }
            else
            {
                <div class="item-view-button">
                    <button class="btn btn-light" style="opacity:0.5"
                            onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, Item.GetRequirementTooltip())))"
                            onmouseout="@(new Action(() => GameState.HideTooltip()))">
                        Equip
                    </button>
                </div>

            }
            <div style="position:absolute;top:-28px;left:-1px;">
                <ItemStatsComponent Item="@Item"></ItemStatsComponent>
            </div>
        }
        else if (Item.WeaponInfo != null)
        {
            <div style="position:absolute;top:-28px;left:-1px;">
                <ItemStatsComponent Item="@Item"></ItemStatsComponent>
            </div>
        }
        @if (Item.Name == "Unidentified Gem")
        {
            if (Item.HasRequirements())
            {
                <div class="item-view-button"><button class="btn btn-light" @onclick="@(() => Identify())">Identify</button></div>
            }
            else
            {
                <div class="item-view-button">
                    <button class="btn btn-light" style="opacity:0.5"
                            onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, Item.GetRequirementTooltip())))"
                            onmouseout="@(new Action(() => GameState.HideTooltip()))">
                        Identify
                    </button>
                </div>
            }


        }
        @if (Item.IsTome)
        {
            @if (GameState.CurrentTome == Item.Category)
            {
                <div class="item-view-button"><button class="btn btn-light" @onclick="@(() => CloseTome())">Close</button></div>

            }
            else
            {
                <div class="item-view-button"><button class="btn btn-light" @onclick="@(() => OpenTome())">Open</button></div>

            }
        }
        @if (Item.Name == "Transit Branch")
        {
            @if (AreaManager.Instance.AreaURLIsValid(GameState.Location))
            {
                <div class="item-view-button"><button class="btn btn-light" @onclick="@(() => Stake())">Stake</button></div>
            }

        }
        else if (Item.Name.Contains("Glowing Transit Branch"))
        {
            <div class="item-view-button"><button class="btn btn-light" @onclick="@(() => Teleport())">Break</button></div>
        }
        @if (Item.FoodInfo != null)
        {
            <div class="item-view-button"><button class="btn btn-light" @onclick="@(() => EatItem())">Eat</button></div>
            <div style="position:absolute;top:-28px;left:-1px;">
                <ItemStatsComponent Item="@Item"></ItemStatsComponent>
            </div>
        }
        @if (ItemManager.Instance.GetUnpackingRecipe(Item) != null)
        {
            if (Item.FoodInfo != null)
            {
                if (ItemManager.Instance.GetUnpackingRecipe(Item).HasSpace())
                {
                    <div class="item-view-button" style="bottom:45px;">
                        @if (GameState.CurrentRecipe == ItemManager.Instance.GetUnpackingRecipe(Item))
                        {
                            <div style="position:relative;">
                                <div class="progress" style="position:absolute;top:0px;width:100%;height:5px;border-radius:0.25rem;z-index:3;">
                                    <div class="progress-bar" style="@GetProgress()"></div>
                                </div>
                            </div>
                        }
                        <button class="btn btn-light"
                                @onclick="@(() => GameState.SetCraftingItem(ItemManager.Instance.GetUnpackingRecipe(Item)))">
                            @ItemManager.Instance.GetUnpackingRecipe(Item).RecipeButtonString
                        </button>
                    </div>

                }
                else
                {
                    <div class="item-view-button"  style="bottom:45px;">
                        <button class="btn btn-light" style="opacity:0.7" @onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, "You don't have enough inventory space.")))"
                                @onmouseout="@(new Action(() => GameState.HideTooltip()))">
                            @ItemManager.Instance.GetUnpackingRecipe(Item).RecipeButtonString
                        </button>
                    </div>

                }
            }
            else
            {
                if (ItemManager.Instance.GetUnpackingRecipe(Item).HasSpace())
                {
                    <div class="item-view-button">
                        @if (GameState.CurrentRecipe == ItemManager.Instance.GetUnpackingRecipe(Item))
                        {
                            <div style="position:relative;">
                                <div class="progress" style="position:absolute;top:0px;width:100%;height:5px;border-radius:0.25rem;z-index:3;">
                                    <div class="progress-bar" style="@GetProgress()"></div>
                                </div>
                            </div>
                        }
                        <button class="btn btn-light"
                                @onclick="@(() => GameState.SetCraftingItem(ItemManager.Instance.GetUnpackingRecipe(Item)))">
                            @ItemManager.Instance.GetUnpackingRecipe(Item).RecipeButtonString
                        </button>
                    </div>

                }
                else
                {
                    <div class="item-view-button">
                        <button class="btn btn-light" style="opacity:0.7" @onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, "You don't have enough inventory space.")))"
                                @onmouseout="@(new Action(() => GameState.HideTooltip()))">
                            @ItemManager.Instance.GetUnpackingRecipe(Item).RecipeButtonString
                        </button>
                    </div>

                }
            }
        }
        @if (Item.OpenCraftingMenuText != "None")
        {
            <div class="item-view-button"><button class="btn btn-light" @onclick="@(() => GameState.RightSidebarComponent.ChangeView("Crafting"))">@Item.OpenCraftingMenuText</button></div>

        }
        @if (ItemManager.Instance.CurrentShop != null)
        {
            @if (Item.IsSellable && Item.IsLocked == false)
            {
                @if (ItemManager.Instance.CurrentShop.LimitBoughtItemsToSoldItems && ItemManager.Instance.CurrentShop.HasItem(Item) == false)
                {
                    <button style="position:absolute;left:5px;bottom:5px;" class="btn btn-light"
                            @onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, "You can't sell that here.")))"
                            @onmouseout="@(new Action(() => GameState.HideTooltip()))">
                        Sell
                    </button>
                }
                else
                {
                    {
                        <button style="position:absolute;left:5px;bottom:5px;" class="btn btn-light" @onclick="@(() => SellItem())">Sell @(Math.Min(ItemManager.Instance.SellAmount, Player.Instance.Inventory.GetNumberOfUnlockedItem(Item)))</button>
                        <div style="position:absolute;left:100px;bottom:5px;">@(GetValue())</div>
                    }
                }

            }
        }
        @if (Bank.Instance.IsBanking && Item.IsLocked == false)
        {
            if (Player.Instance.CurrentFollower != null && Player.Instance.CurrentFollower.AutoCollectSkill == "Banking" && Item.IsSellable)
            {
                @if (SaleValueOverZero())
                {
                    <button style="position:absolute;right:5px;top:5px;padding:6px;" class="btn btn-light" @onclick="@(() => SellItemFromBank())">Sell @(Math.Min(Bank.Instance.Amount, Bank.Instance.Inventory.GetNumberOfItem(Item)).CustomFormat())</button>

                }
                else
                {
                    <button style="position:absolute;right:5px;top:5px;opacity:0.5;padding:6px;" class="btn btn-light"
                            @onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, "Selling this would give you nothing in return!")))"
                            @onmouseout="@(new Action(() => GameState.HideTooltip()))">
                        Sell @(Math.Min(Bank.Instance.Amount, Bank.Instance.Inventory.GetNumberOfItem(Item)).CustomFormat())
                    </button>

                }
                <div style="position:absolute;right:5px;top:45px">
                    @(GetBankSaleValue())
                </div>

            }
            <button class="btn btn-light" style="position:absolute;left:5px;bottom:5px;" onclick="@(new Action<MouseEventArgs>((args) => BankItem()))">Deposit @Bank.Instance.GetAmountString()</button>

        }
    }
</div>


@code {
    [Parameter]
    public GameItem Item { get; set; }
    private bool HideValue;


    public void Stake()
    {
        if (GameState.Location.Contains('/'))
        {
            MessageManager.AddMessage("You should step outside before doing that.");
            Console.WriteLine(GameState.Location);
            return;
        }
        MessageManager.AddMessage("You stab the branch into the ground and it begins to glow.");
        GameItem i = ItemManager.Instance.GetCopyOfItem("Glowing Transit Branch");
        i.Parameter = GameState.Location;
        i.Name += "(" + AreaManager.Instance.GetAreaByURL(GameState.Location).Name + ")";
        i.Description += "This was staked in " + AreaManager.Instance.GetAreaByURL(GameState.Location).Name + ".";
        i.SecondaryColor = GameState.CurrentLand.TopColor;
        if(ItemManager.Instance.GetItemByUniqueID(i.UniqueID) == null)
        {
            ItemManager.Instance.ItemLookupDic.Add(i.Name, i);
            ItemManager.Instance.UniqueIDLookupDic.Add(i.UniqueID, i);
            ItemManager.Instance.Items.Add(i);
        }

        Player.Instance.Inventory.RemoveItems(Item, 1);
        Player.Instance.Inventory.AddItem(i);
        if (Player.Instance.Inventory.HasItem(Item) == false)
        {
            ClearItem();
        }
    }
    public void Teleport()
    {
        Area a = AreaManager.Instance.GetAreaByURL(Item.Parameter);
        if (a != null && a.HasRequirements())
        {
            Player.Instance.Inventory.RemoveItems(Item, 1);
            MessageManager.AddMessage("You snap the branch and are teleported away.");
            GameState.NavMenu.GoToArea(Item.Parameter);
            if (Player.Instance.Inventory.HasItem(Item) == false)
            {
                ClearItem();
            }
        }
        else
        {
            MessageManager.AddMessage("The branch refuses to be snapped. Is there something you need at the location it will take you?");
        }

    }
    private string GetValue()
    {
        return (Item.Value * Math.Min(ItemManager.Instance.SellAmount, Player.Instance.Inventory.GetNumberOfItem(Item)) / 2) + " " + ItemManager.Instance.CurrentShop.CurrencyName;
    }
    private string GetBankSaleValue()
    {
        return (Item.Value * Math.Min(Bank.Instance.Amount, Bank.Instance.Inventory.GetNumberOfItem(Item)) / 2).CustomFormat() + " Coins";
    }
    private bool SaleValueOverZero()
    {
        return (Item.Value * Math.Min(Bank.Instance.Amount, Bank.Instance.Inventory.GetNumberOfItem(Item)) / 2) > 0;
    }
    private void Identify()
    {
        GameItem i = ItemManager.Instance.GetCopyOfItem(Item.Parameter);
        if(Player.Instance.Inventory.RemoveItems(Item, 1) == 1)
        {
            Player.Instance.Inventory.AddItem(i);
            MessageManager.AddMessage("You correctly identify this as a " + i.Name);
        }
        if(Player.Instance.Inventory.HasItem(Item) == false)
        {
            ClearItem();
        }


        GameState.UpdateState();
    }
    private void SellItemFromBank()
    {
        GameState.SellItemFromBank(Item);
        if (Player.Instance.Inventory.HasItem(Item) == false)
        {
            ClearItem();
        }
        GameState.UpdateState();
    }
    private void SellItem()
    {
        GameState.SellItem(Item);
        if(Player.Instance.Inventory.HasItem(Item) == false)
        {
            ClearItem();
        }
        GameState.UpdateState();
    }
    private void EatItem()
    {
        GameState.Eat(Item);
        if (Player.Instance.Inventory.GetNumberOfItem(Item) == 0)
        {
            GameState.inventoryViewer.SelectedItem = null;
            ClearItem();
        }
        GameState.UpdateState();
    }
    private void BankItem()
    {
        Bank.Instance.Deposit(Item);
        if(Player.Instance.Inventory.GetNumberOfItem(Item) == 0)
        {
            GameState.inventoryViewer.SelectedItem = null;
            ClearItem();
        }
        GameState.UpdateState();
    }
    private void OpenTome()
    {
        if(GameState.CurrentAFKAction == null && GameState.IsOnHuntingTrip == false)
        {
            GameState.ShowTome = true;
            GameState.CurrentTome = Item.Category;
        }
        else
        {
            MessageManager.AddMessage("You're too busy with what you're doing to be reading right now.");
        }
    }
    private void CloseTome()
    {
        GameState.ShowTome = false;
        GameState.CurrentTome = "None";
    }
    private void Equip()
    {
        Item.Rerender = true;
        Player.Instance.Equip(Item);
        GameState.UpdateState();
    }
    private void Unequip()
    {
        Item.Rerender = true;
        Player.Instance.Unequip(Item);

        GameState.UpdateState();
    }
    public void ClearItem()
    {
        Item = null;
        HideValue = true;
        StateHasChanged();
    }
    public void ShowItem()
    {
        HideValue = false;
        StateHasChanged();
    }
    public string GetLock()
    {
        if(Item == null)
        {
            return "";
        }
        if (Item.IsLocked)
        {
            return "Locked.png";
        }
        return "Unlocked.png";
    }
    public string GetLockStyle()
    {
        if (Item == null)
        {
            return "";
        }
        if (Item.IsLocked == false)
        {
            return "background: #63bb63;";
        }
        return "background: red;";
    }
    public void ToggleLock()
    {
        if(Item != null)
        {
            Item.IsLocked = !Item.IsLocked;
            Item.Rerender = true;
            if (Item.IsLocked && GameState.HideLockedItems)
            {
                ClearItem();
                Player.Instance.Inventory.RerenderAll();
            }

        }


        GameState.UpdateState();
    }
    private string GetProgress()
    {
        if (GameState.CurrentRecipe != null)
        {
            return "width:" + (100 - ((double)GameState.TicksToNextAction / (GameState.CurrentRecipe.CraftingSpeed) * 100d)) + "%";
        }
        return "width:0%";
    }
    protected override void OnInitialized()
    {
        GameState.itemViewer = this;
        HideValue = false;
        GameState.StateChanged += OnGameStateChanged;
    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}

