@inject GameState GameState
@implements IDisposable


@if (IsHunting)
{
    <div style="position:relative">
        <button class="btn btn-primary" style="margin: 5px;" onclick="@(new Action(() => ReturnForAir()))">Return for air</button>
    </div>
    <div>
        Air
        <div class="progress" style="width:300px;margin:5px;">
            <div class="progress-bar" style="@GetAirProgress()"></div>
        </div>
    </div>
    @if (IsCorralling == false)
    {
        <div style="position:relative;margin:5px;">
            <button class="btn btn-primary" onclick="@(new Action(() => CorralFish()))">Chase Fish</button>
        </div>
    }
    else
    {
        <div style="position:relative;margin:5px;">
            <button class="btn btn-primary" onclick="@(new Action(() => StopCorralling()))">Stop Chasing Fish</button>
        </div>
    }
<div>Corralled fish:@availableFish</div>
@if(availableFish > 0)
{
        if (IsGathering)
        {
            <div style="position:relative;margin:5px;">
                <button class="btn btn-primary" onclick="@(new Action(() => StopGathering()))">Stop Gathering</button>
            </div>
        }
        else
        {
            if (Player.Instance.HasToolRequirement("Trident Hunting"))
            {
                <div style="position:relative;margin:5px;">
                    <button class="btn btn-primary" onclick="@(new Action(() => GatherFish()))">Gather Fish</button>
                </div>
            }
            else
            {
                <div style="position:relative;margin:5px;">
                    <button class="btn btn-primary" style="opacity:0.5" @onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, "You need some kind of trident to catch these fish.")))"
                            @onmouseout="@(new Action(() => GameState.HideTooltip()))">
                        Gather Fish
                    </button>
                </div>
            }
        }
    }
else
    {
        <div style="position:relative;margin:5px;">
            <button class="btn btn-primary" style="opacity:0.5" @onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, "You need to corral fish first!")))"
                    @onmouseout="@(new Action(() => GameState.HideTooltip()))">
                Gather Fish
            </button>
        </div>
    }
}
else
{
    <button class="btn btn-primary" style="margin:5px;" @onclick="@(() => Hunt())">Enter Water</button>
}






@code {
    private string gatherText = "";
    private string tooltip = "";
    private string beginText = "";
    private Random rand = new Random();
    private int LastGameTick;
    private int FinishGameTick;
    private int availableFish;
    private int air;
    private bool IsCorralling;
    private bool IsGathering;
    private bool IsHunting;

    public void Hunt()
    {
        IsHunting = true;
        GameState.UpdateState();
    }

    public void CorralFish()
    {
        FinishGameTick = GameState.CurrentTick + GameState.Random.Next(10, 25);
        IsCorralling = true;
        IsGathering = false;
        MessageManager.AddMessage("You start corralling the fish.");
        GameState.UpdateState();
    }
    public void StopCorralling()
    {
        IsCorralling = false;
        GameState.UpdateState();
    }
    public void StopGathering()
    {
        IsGathering = false;
        GameState.UpdateState();
    }
    public void ReturnForAir()
    {
        air = 100;
        availableFish /= 2;
        IsCorralling = false;
        IsGathering = false;
    }
    public void GatherFish()
    {
        FinishGameTick = GameState.CurrentTick + GameState.Random.Next(10, 25);
        IsCorralling = false;
        IsGathering = true;
        MessageManager.AddMessage("You start chasing the fish, hoping to catch some.");
        GameState.UpdateState();
    }
    public void GatherItem(GameItem i)
    {
        if (i == null)
        {
            Console.WriteLine("Item was null");
            GameState.CurrentGatherItem = null;
            GameState.UpdateState();
            return;
        }
        if (beginText != "")
        {
            MessageManager.AddMessage(beginText);
        }
        GameState.CurrentGatherItem = i;
        GameState.TicksToNextAction = GameState.CurrentGatherItem.GatherSpeed.ToGaussianRandom();
        GameState.UpdateState();
    }

    protected override void OnInitialized()
    {
        air = 100;
        GameState.StateChanged += OnGameStateChanged;
    }

    private string GetAirProgress()
    {
        return "width:" + (air) + "%";
    }

    public void Dispose()
    {
        IsHunting = false;
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e)
    {
        if (IsCorralling && FinishGameTick <= GameState.CurrentTick)
        {
            MessageManager.AddMessage("You corral some more fish.");
            availableFish += GameState.Random.Next(1, 5);
            FinishGameTick = GameState.CurrentTick + GameState.Random.Next(7, 20);
        }
        else if (IsGathering && FinishGameTick <= GameState.CurrentTick)
        {
            MessageManager.AddMessage("You stab your trident and catch some fish.");
            int amt = GameState.Random.Next(1, 5);
            amt = Math.Min(amt, availableFish);
            Player.Instance.Inventory.AddMultipleOfItem("Sashcom", amt);
            availableFish -= amt;
            FinishGameTick = GameState.CurrentTick + GameState.Random.Next(7, 20);
            Player.Instance.GainExperienceMultipleTimes("Hunting:15", amt);
            if (availableFish <= 0)
            {
                MessageManager.AddMessage("You caught the last of the fish.");
                IsGathering = false;
            }
            else if (Player.Instance.Inventory.GetAvailableSpaces() == 0)
            {
                MessageManager.AddMessage("You have run out of inventory space.");
                IsGathering = false;
            }
        }
        if (LastGameTick != GameState.CurrentTick)
        {
            LastGameTick = GameState.CurrentTick;
            if (LastGameTick % 3 == 0)
            {
                air--;
            }

            if (air == 25)
            {
                MessageManager.AddMessage("You are running out of air!", "red");
            }
            if (air <= 0)
            {
                MessageManager.AddMessage("You run out of air, suffocate, and die.", "red");
                IsGathering = false;
                IsCorralling = false;
                availableFish = 0;
                Player.Instance.Die();
                air = 100;
            }
        }
        StateHasChanged();
    }
}
