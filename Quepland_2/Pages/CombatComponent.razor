@page "/World/Battle/"
@inject GameState GameState
@inject NavigationManager UriHelper
@implements IDisposable

@if (BattleManager.Instance.CurrentOpponents != null)
{
<div style="width:550px;height:300px;">

        @foreach (Monster opponent in BattleManager.Instance.CurrentOpponents)
        {
        <div>
            @opponent.Name
            <div>
                @opponent.CurrentHP / @opponent.HP
            </div>
            <div style="display:flex">
                <div class="progress" style="width:120px;height:40px;font-size:large;position:relative">
                    <div style="position:absolute;margin-Left:35px;line-height:40px;color:black">Attack</div>
                    <div class="progress-bar" style="width:@(GetOpponentAttackProgress(opponent));background-color:mediumpurple">

                    </div>
                </div>
                @if (opponent == BattleManager.Instance.Target || opponent.IsDefeated)
                {
                    <div class="btn btn primary" style="width:120px;height:40px;font-size:large;position:relative;opacity:0.5;margin-left:10px;background-color:black">
                        <div style="color:white">Target</div>

                    </div>
                }
                else
                {
                    <div class="btn btn primary" style="width:120px;height:40px;font-size:large;position:relative;margin-left:10px;background-color:black;cursor:pointer" @onclick="@(() => SwitchTargets(opponent))">
                        <div style="color:white">Target</div>

                    </div>
                }
                @foreach (IStatusEffect effect in opponent.CurrentStatusEffects)
                {
                    <div>
                        <img style="height:30px;width:30px;margin:3px;background-color:white;border-radius:0.25rem;" src="data/Images/@(effect.Name).png"
                             @onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, effect.Name)))"
                             @onmouseout="@(new Action(() => GameState.HideTooltip()))" />
                    </div>
                }
            </div>

            <div class="progress" style="width:550px;margin-top:10px;background-color:darkred">
                <div class="progress-bar" style="width:@(opponent.GetRemainingHPPercent())%;background-color:#51d051">

                </div>
            </div>
        </div>
        }

        <div>
            You
            <div>
                @Player.Instance.CurrentHP / @Player.Instance.MaxHP
            </div>
            <div class="progress" style="width:550px;margin-top:10px;background-color:darkred">
                <div class="progress-bar" style="width:@(GetPlayerHPPercent());background-color:#51d051;">

                </div>
            </div>
            <div class="progress" style="width:120px;height:40px;font-size:large;position:relative;margin-top:10px;">

                <div style="position:absolute;margin-Left:35px;line-height:40px;color:black">Attack</div>


                <div class="progress-bar" style="width:@(GetPlayerAttackProgress());background-color:mediumpurple">
                </div>
            </div>
            <div style="display:flex;margin-top:10px;">
                @foreach (IStatusEffect effect in Player.Instance.CurrentStatusEffects)
                {
                    <div>
                        <img style="height:30px;width:30px;margin:3px;background-color:white;border-radius:0.25rem;" src="data/Images/@(effect.Name).png"
                             @onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, effect.Name)))"
                             @onmouseout="@(new Action(() => GameState.HideTooltip()))" />
                    </div>
                }
            </div>
        </div>
    </div>

    @if (BattleManager.Instance.CurrentArea != null && BattleManager.Instance.BattleHasEnded)
    {
        <div style="margin-top: 100px; margin-bottom: 200px;">
            @if (Player.Instance.CurrentFollower != null && Player.Instance.CurrentFollower.AutoCollectSkill.Contains("Scout"))
            {
                <div style=" margin-top: 10px;">
                    <button class="btn btn-primary" @onclick="@(() => AutoBattle())">Auto Battle</button>
                </div>
                @if (Player.Instance.CurrentFollower.AutoCollectSkill == "Advanced Scout")
                {
                    <div style="margin-left:-10px;">
                        <Quepland_2.Components.CustomDropdownComponent BoxText="Select an opponent" @bind-Value="@selectedOpponent" DropdownItems="@GetPossibleOpponents()" EmptyText="There are no opponents to fight here"></Quepland_2.Components.CustomDropdownComponent>
                    </div>
                }
            }
            else
            {
                <div>
                    <button class="btn btn-primary" @onclick="@(() => ContinueBattles())">Fight Again</button>
                </div>
            }
            <div style=" margin-top: 10px;">
                <button class="btn btn-primary" @onclick="@(() => Return())">Return</button>
            </div>
        </div>

    }
    else if (BattleManager.Instance.AutoBattle)
    {
        <div style="margin-top: 100px; margin-bottom: 200px;">
            <div>
                <button class="btn btn-primary" @onclick="@(() => StopAutoBattle())">Stop Auto Battling</button>
            </div>
        </div>
    }
    }


    @code {

        private string selectedOpponent = "";

        public List<string> GetPossibleOpponents()
        {
            if (BattleManager.Instance.CurrentArea?.Monsters == null)
            {
                return new List<string>();
            }
            return BattleManager.Instance.CurrentArea.Monsters;
        }

        public void SwitchTargets(Monster m)
        {
            if (BattleManager.Instance.CurrentOpponents.Contains(m) && m.IsDefeated == false)
            {
                BattleManager.Instance.Target = m;
            }

            GameState.UpdateState();
        }
        private void AutoBattle()
        {
            BattleManager.Instance.AutoBattle = true;
            ContinueBattles();
            GameState.UpdateState();
        }
        private void StopAutoBattle()
        {
            BattleManager.Instance.AutoBattle = false;
            BattleManager.Instance.CurrentOpponents.Clear();
            BattleManager.Instance.EndBattle();
            GameState.UpdateState();
        }
        private void ContinueBattles()
        {
            GameState.StopNonCombatActions();
            if (BattleManager.Instance.AutoBattle && selectedOpponent != "")
            {
                BattleManager.Instance.StartBattle(BattleManager.Instance.GetMonsterByName(selectedOpponent));
            }
            else
            {
                BattleManager.Instance.StartBattle(BattleManager.Instance.CurrentArea);
            }


            GameState.UpdateState();
        }
        private string GetPlayerHPPercent()
        {
            return (((double)Player.Instance.CurrentHP / Player.Instance.MaxHP) * 100d) + "%";
        }
        private string GetOpponentAttackProgress(Monster opponent)
        {
            return (100 - (((double)opponent.TicksToNextAttack / opponent.AttackSpeed) * 100d)) + "%";
        }
        private string GetPlayerAttackProgress()
        {
            return (100 - (((double)Player.Instance.TicksToNextAttack / Player.Instance.GetWeaponAttackSpeed()) * 100d)) + "%";
        }
        private void Return()
        {
            if (String.IsNullOrEmpty(BattleManager.Instance.ReturnLocation))
            {
                GameState.Location = BattleManager.Instance.CurrentArea.AreaURL;
                UriHelper.NavigateTo("World/" + BattleManager.Instance.CurrentArea.AreaURL);
            }
            else
            {
                GameState.Location = BattleManager.Instance.ReturnLocation;
                BattleManager.Instance.ReturnLocation = "";
                UriHelper.NavigateTo(GameState.Location);
            }
        }
        protected override void OnInitialized()
        {
            GameState.StateChanged += OnGameStateChanged;
        }
        public void Dispose()
        {
            BattleManager.Instance.BattleHasEnded = true;

            GameState.StateChanged -= OnGameStateChanged;
        }
        void OnGameStateChanged(object sender, EventArgs e)
        {
            StateHasChanged();
        }
}
