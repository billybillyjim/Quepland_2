@page "/World/{areaURL}/{buildingURL}"
@inject GameState GameState
@inject NavigationManager UriHelper

@if (thisBuilding != null)
{

    <br />
    @if (GameState.CurrentAFKAction != null)
    {
        <button class="btn btn-primary" style="opacity:0.5" 
                @onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, "You can't leave while training " + GameState.CurrentAFKAction.SkillTrained)))"
                @onmouseout="@(new Action(() => GameState.HideTooltip()))" >Exit</button>

    }
    else
    {
        <button class="btn btn-primary" @onclick="@(() => Exit())">Exit</button>

    }
    <br />
    <div>@thisBuilding.Name</div>
    <div>@thisBuilding.Description</div>
    @if(thisBuilding.AlchemicalHall != "None")
    {
        <AlchemicalHallComponent QueplarMultiplier="@thisBuilding.QueplarMultiplier" HallName="@thisBuilding.AlchemicalHall"></AlchemicalHallComponent>
    }
    @foreach (AFKAction afkAction in thisBuilding.AFKActions)
    {
        <Quepland_2.Components.AFKActionComponent AFKAction="@afkAction"></Quepland_2.Components.AFKActionComponent>

    }
    @foreach (string npc in thisBuilding.NPCs)
    {
        <Quepland_2.Components.NPCDialogComponent npc="@npc"></Quepland_2.Components.NPCDialogComponent>
    }
    @foreach (Shop Shop in thisBuilding.Shops)
    {
        <Quepland_2.Components.ShopComponent Shop="@Shop"></Quepland_2.Components.ShopComponent>
    }
    @foreach (TanningSlot slot in thisBuilding.TanningSlots)
    {
        <Quepland_2.Components.TanningSlotComponent Slot="@slot"></Quepland_2.Components.TanningSlotComponent>
    }
    @if (thisBuilding.HasOven)
    {
        <Quepland_2.Components.OvenComponent></Quepland_2.Components.OvenComponent>
    }
    @if(thisBuilding.HasSmithy)
    {
        <Quepland_2.Pages.SmithyComponent Location="@buildingURL"></Quepland_2.Pages.SmithyComponent>
    }
    @if (thisBuilding.IsGuild)
    {
        <Quepland_2.Components.GuildDepositBoxComponent></Quepland_2.Components.GuildDepositBoxComponent>
    }
}



@code {
    [Parameter]
    public string areaURL { get; set; }
    [Parameter]
    public string buildingURL { get; set; }
    public Building thisBuilding { get; set; }

    private void Exit()
    {
        GameState.GoTo("/World/" + areaURL);
        GameState.UpdateState();
    }
    private void Talk(Dialog d)
    {
        d.Talk();
        GameState.UpdateState();
    }
    protected override void OnParametersSet()
    {
        thisBuilding = AreaManager.Instance.GetAreaByURL(areaURL).GetBuildingByURL(buildingURL);
        GameState.UpdateState();
    }
    protected override void OnInitialized()
    {

        GameState.StateChanged += OnGameStateChanged;
    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e)
    {
        StateHasChanged();
    }
}
