@page "/World/{areaURL}"
@inject GameState GameState
@inject NavigationManager UriHelper
@implements IDisposable


@if (thisArea != null)
{
    <h1>@thisArea.Name</h1>
    <p>@thisArea.Description</p>

    @if (GameState.IsOnHuntingTrip == false)
    {
        @foreach (string a in thisArea.Actions ?? Enumerable.Empty<string>())
        {
            if (a == "Smithy")
            {
                <SmithyComponent Location="@thisArea.AreaURL"></SmithyComponent>
                <br />
            }
            else if (a == "Cabochon")
            {
                <Quepland_2.Components.CabochonStoneComponent></Quepland_2.Components.CabochonStoneComponent>
            }
            else if(a == "Gem Cutting")
            {
                <Quepland_2.Components.GemCuttingComponent></Quepland_2.Components.GemCuttingComponent>
            }
            else if(a.Contains("Ice Fish"))
            {
                <Quepland_2.Components.IceFishingComponent ActionText="@a"></Quepland_2.Components.IceFishingComponent>
            }
            else
            {
                <Quepland_2.Components.GatherButtonComponent ActionText="@a"></Quepland_2.Components.GatherButtonComponent>
                <br />
            }

        }
        @foreach (string a in thisArea.ConversionActions ?? Enumerable.Empty<string>())
        {
            <Quepland_2.Components.ConvertItemsComponent ActionText="@a"></Quepland_2.Components.ConvertItemsComponent>
            <br />
        }
        @foreach (Building b in thisArea.Buildings)
        {
            if (b.HasRequirements())
            {
                <div>
                    <button class="btn btn-success" @onclick="@(() => EnterBuilding(b.URL))">@b.ButtonText</button>
                </div>
            }
            else
            {
                <div>
                    <button class="btn btn-success" style="opacity:0.5"
                            onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, b.Name, b.GetRequirementTooltip())))"
                            onmouseout="@(new Action(() => GameState.HideTooltip()))">
                        @b.ButtonText
                    </button>
                </div>
            }
            <br />
        }
        @foreach (AFKAction afkAction in thisArea.AFKActions)
        {
            <Quepland_2.Components.AFKActionComponent AFKAction="@afkAction"></Quepland_2.Components.AFKActionComponent>

        }
        @if (thisArea.DojoURL != null)
        {
            <div>
                <button class="btn btn-dark" @onclick="@(() => EnterDojo(thisArea.DojoURL))">Enter @thisArea.Dojo.Name</button>

            </div>
            <br />
        }
        @if (thisArea.DungeonName != null)
        {
            <div>
                <button class="btn btn-dark" @onclick="@(() => EnterDungeon(thisArea.Dungeon.URL))">@thisArea.Dungeon.GetButtonText()</button>

            </div>
            <br />
        }
        @if (thisArea.Monsters != null && thisArea.Monsters.Count > 0)
        {
            <div>
                <button class="btn btn-dark" @onclick="@(e => FindBattles())">Battle</button>

            </div>
            <br />
        }
        @foreach (AreaUnlock a in thisArea.UnlockableAreas)
        {
            if (AreaManager.Instance.GetAreaByURL(a.AreaURL).IsUnlocked == false || a.ConnectsLands)
            {

                <Quepland_2.Components.AreaUnlockComponent areaToUnlock="@a"></Quepland_2.Components.AreaUnlockComponent>
                <br />
            }
        }


        @if (thisArea.TrapSlot != null)
        {
            <Quepland_2.Components.HuntingTrapComponent Slot="@thisArea.TrapSlot"></Quepland_2.Components.HuntingTrapComponent>
            <br />
        }
    }

    @if (thisArea.HuntingTripInfo != null)
    {
        <Quepland_2.Components.HuntingTripComponent TripInfo="@thisArea.HuntingTripInfo"></Quepland_2.Components.HuntingTripComponent>
        <br />
    }
    @if (thisArea.NPCs.Count > 0 && GameState.IsOnHuntingTrip == false)
    {
        @foreach (string npc in thisArea.NPCs)
        {
            <Quepland_2.Components.NPCDialogComponent npc="@npc"></Quepland_2.Components.NPCDialogComponent>

        }

    }
}

@code {

    [Parameter]
    public string areaURL { get; set; }
    public Area thisArea { get; set; }

    private void FindBattles()
    {
        GameState.StopNonCombatActions();
        BattleManager.Instance.StartBattle(thisArea);
        GameState.Location = "Battle";
        UriHelper.NavigateTo("World/Battle/");
    }

    private void EnterBuilding(string buildingURL)
    {
        GameState.StopActions();
        GameState.Location = areaURL + "/" + buildingURL;
        UriHelper.NavigateTo("World/" + areaURL + "/" + buildingURL);
    }
    private void EnterDojo(string dojoURL)
    {
        GameState.StopActions();
        GameState.Location = "Dojo/" + dojoURL;
        UriHelper.NavigateTo("World/Dojo/" + dojoURL);
    }
    private void EnterDungeon(string dungeonURL)
    {
        GameState.StopActions();
        GameState.Location = dungeonURL;
        UriHelper.NavigateTo("Underworld/" + dungeonURL);
    }
    private void EnterSmithy()
    {
        GameState.StopActions();
        GameState.Location = "Smithy/" + areaURL;
        UriHelper.NavigateTo("World/Smithy/" + areaURL);
    }
    protected override void OnInitialized()
    {
        GameState.StateChanged += OnGameStateChanged;
    }
    protected override void OnParametersSet()
    {
        thisArea = AreaManager.Instance.GetAreaByURL(areaURL);
        GameState.NavMenu.ChangeOpenRegion(AreaManager.Instance.GetRegionForArea(thisArea), false);
        GameState.UpdateState();

    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
