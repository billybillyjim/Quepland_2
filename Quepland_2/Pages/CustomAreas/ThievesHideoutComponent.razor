@page "/World/ThievesHideout/"
@inject GameState GameState
@inject NavigationManager UriHelper
@implements IDisposable

@if (startedBattle == false)
{
    if ((QuestManager.Instance.GetQuestByName("Grand Theft Camel").Progress >= 15 || QuestManager.Instance.GetQuestByName("Grand Theft Camel").IsComplete == false))
    {
        <h1>Thieves Secret Hideout</h1>
        <div>The hideout is a small rocky island, large enough to support a few buildings and a few camels. There are quite a few of both, making for very little room to move. Waves of bandits are coming to attack you, but they can only come in small groups.</div>
        <button class="btn btn-danger" @onclick="@(() => StartBattle())">Fight</button>

        <br />

    }
}
else
{
    @if (QuestManager.Instance.GetQuestByName("Grand Theft Camel").Progress == 23 &&
    Player.Instance.Inventory.HasItem("A lot of Camels") == false &&
    Bank.Instance.Inventory.HasItem("A lot of Camels") == false)
    {
        <div style="margin:5px;">
            <button class="btn btn-primary" @onclick="@(() => TakeCamels())">Take Camels Back</button>
        </div>
        
    }
    @if (allWavesDefeated)
    {
        <div style="margin:5px;">
            <button class="btn btn-primary" style="position:relative;top:30px;" @onclick="@(() => Return())">Return to Uragota</button>

        </div>

    }
    else if (BattleManager.Instance.BattleHasEnded)
    {
        <div>Remaining Bandits:@(GetRemainingBandits())</div>

        @if (BattleManager.Instance.WonLastBattle)
        {
            <div>Another wave of bandits approaches!</div>
            <button class="btn btn-danger" style="position:relative;top:30px;" @onclick="@(() => StartBattle())">Fight More</button>

        }
        else
        {
            <div>The bandits defeated you. But don't worry! You can try again now or choose to come back later.</div>
            <button class="btn btn-danger" style="position:relative;top:30px;" @onclick="@(() => StartBattle())">Retry</button>
            <button class="btn btn-primary" style="position:relative;top:30px;" @onclick="@(() => Return())">Return to Uragota</button>

        }
    }
    else
    {
        <div>Remaining Bandits:@(GetRemainingBandits())</div>
        <CombatComponent></CombatComponent>
    }
}



@code {
    private bool startedBattle;
    private List<string> Opponents = new List<string>() { "Bandit", "Bandit", "Big Bandit", "Two Bandits", "Bandit,Big Bandit", "Two Bandits,Big Bandit", "Bandit Lord", "Ion the Island Bandit King" };
    private int currentWave = -1;
    private bool allWavesDefeated;

    public void Return()
    {
        GameState.GoTo("World/UragotaTown");
    }
    protected override void OnInitialized()
    {
        currentWave = -1;
        GameState.StateChanged += OnGameStateChanged;
    }
    public void TakeCamels()
    {
        if (Player.Instance.Inventory.GetAvailableSpaces() == 0)
        {
            MessageManager.AddMessage("You don't have enough inventory space for all those camels!");
        }
        else
        {
            MessageManager.AddMessage("You take all the camels.");
            Player.Instance.Inventory.AddItem("A lot of Camels");
        }

    }
    public int GetRemainingBandits()
    {
        int count = 0;
        if (BattleManager.Instance.WonLastBattle == false)
        {
            for (int i = 0; i < Opponents.Count; i++)
            {
                if (Opponents[i] == "Two Bandits")
                {
                    count += 2;
                }
                else if (Opponents[i].Contains(','))
                {
                    count += 2;
                }
                else
                {
                    count++;
                }
            }
            return count;
        }
        else
        {
            for (int i = currentWave; i < Opponents.Count; i++)
            {
                if (Opponents[i] == "Two Bandits")
                {
                    count += 2;
                }
                else if (Opponents[i].Contains(','))
                {
                    count += 2;
                }
                else
                {
                    count++;
                }
            }
            return count;
        }
    }
    public void StartBattle()
    {
        if (GameState.IsStoppingNextTick == false)
        {
            if (BattleManager.Instance.WonLastBattle)
            {
                currentWave++;
            }
            else
            {
                currentWave = 0;
            }
            if (currentWave >= Opponents.Count)
            {
                MessageManager.AddMessage("You've defeated all the bandits! You can take the camels back with you to return them Carl now.");
                QuestManager.Instance.GetQuestByName("Grand Theft Camel").Progress = 23;
                allWavesDefeated = true;
                return;
            }
            string[] wave = Opponents[currentWave].Split(',');
            BattleManager.Instance.CurrentOpponents.Clear();
            foreach (string s in wave)
            {
                BattleManager.Instance.CurrentOpponents.Add(BattleManager.Instance.GetMonsterByName(s));
            }

            BattleManager.Instance.StartBattle();
            startedBattle = true;
        }

    }
    public void Dispose()
    {
        startedBattle = false;
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
